#!/usr/bin/env php
<?php
// +----------------------------------------------------------------------
// | CodeEngine
// +----------------------------------------------------------------------
// | Copyright 艾邦
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: TaoGe <liangtao.gz@foxmail.com>
// +----------------------------------------------------------------------
// | Date: 2021/4/20 10:28
// +----------------------------------------------------------------------

// vendor
require 'vendor/autoload.php';

use Kafka\Consumer;
use Kafka\ConsumerConfig;
use Swoole\Process;
use Swoole\Runtime;
use Swoole\Coroutine;
use V2dmIM\Core\utils\log\Log;
use V2dmIM\Handle\Auth;
use function Swoole\Coroutine\run;

// 此行代码后，文件操作，sleep，Mysqli，PDO，streams等都变成异步IO，见'一键协程化'章节
Runtime::enableCoroutine();

Log::info('Handle service start time ' . (new DateTime)->format('Y-m-d H:i:s'));
Log::info('PHP version: ' . PHP_VERSION);
Log::info('SWOOLE version: ' . SWOOLE_VERSION);
Log::info('Handle version: ' . V2DMIM_VERSION);

// Swoole\Coroutine\run()见'协程容器'章节
run(function () {
    Log::info('start coroutine container id: ' . Swoole\Coroutine::getCid());
    // 服务列表
    $serviceList = ['Auth' => Auth::class];
    // 服务注册实例列表
    $registerEtcdList = [];
    static $running = true;
    // 收到 SIGTERM信 号关闭服务
    Process::signal(SIGTERM, function () use (&$registerEtcdList, &$running) {
        Log::info('收到 SIGTERM 信号关闭服务');
        $running = false;
        foreach ($registerEtcdList as $key => $service) {
            $service->unregister();
            Log::info($key . ' service unregisterEtcd.');
        }
    });
//    foreach ($serviceList as $key => $service) {
//        Coroutine::create(function () use ($key, $service, &$registerEtcdList, &$running) {
//            Log::info($key . ' service start coroutine cid: ' . Swoole\Coroutine::getCid() . ' pid: ' . Swoole\Coroutine::getPcid());
//            Coroutine::create(function () use ($key, $service, &$registerEtcdList) {
//                Log::info($key . ' registerEtcd start coroutine cid: ' . Swoole\Coroutine::getCid() . ' pid: ' . Swoole\Coroutine::getPcid());
//                $etcd                   = new $service;
//                $registerEtcdList[$key] =& $etcd->register;
//                $etcd->registerEtcd();
//            });
//            while ($running) {
//                usleep(3000000);
//                Log::info('run ' . $key . '...');
//            }
//        });
//    }

    $config = ConsumerConfig::getInstance();
    $config->setMetadataRefreshIntervalMs(config('kafka.metadata_refresh_interval_ms'));
    $config->setMetadataBrokerList(config('kafka.metadata_broker_list'));
    $config->setBrokerVersion(config('kafka.broker_version'));
    $config->setGroupId("0");
    $config->setTopics(array('userRegister'));
    //$config->setOffsetReset('earliest');
    $consumer = new Consumer();
    $consumer->start(function ($topic, $part, $message) {
        var_dump($topic);
        var_dump($part);
        var_dump($message);
    });

});

